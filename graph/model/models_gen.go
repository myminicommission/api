// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Estimate struct {
	ID    string     `json:"id"`
	Minis []*MiniQty `json:"minis"`
	User  *User      `json:"user"`
}

type Mini struct {
	ID   string   `json:"id"`
	Name string   `json:"name"`
	Size MiniSize `json:"size"`
	Cost float64  `json:"cost"`
}

type MiniCost struct {
	Size MiniSize `json:"size"`
	Cost float64  `json:"cost"`
}

type MiniQty struct {
	Qty  int   `json:"qty"`
	Mini *Mini `json:"mini"`
}

type NewEstimate struct {
	UserID string `json:"userId"`
}

type NewMini struct {
	Name string   `json:"name"`
	Size MiniSize `json:"size"`
}

type Quote struct {
	ID       string     `json:"id"`
	Estimate *Estimate  `json:"estimate"`
	Minis    []*MiniQty `json:"minis"`
	User     *User      `json:"user"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type MiniSize string

const (
	MiniSizeTiny    MiniSize = "TINY"
	MiniSizeRegular MiniSize = "REGULAR"
	MiniSizeLarge   MiniSize = "LARGE"
	MiniSizeTitanic MiniSize = "TITANIC"
)

var AllMiniSize = []MiniSize{
	MiniSizeTiny,
	MiniSizeRegular,
	MiniSizeLarge,
	MiniSizeTitanic,
}

func (e MiniSize) IsValid() bool {
	switch e {
	case MiniSizeTiny, MiniSizeRegular, MiniSizeLarge, MiniSizeTitanic:
		return true
	}
	return false
}

func (e MiniSize) String() string {
	return string(e)
}

func (e *MiniSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MiniSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MiniSize", str)
	}
	return nil
}

func (e MiniSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
