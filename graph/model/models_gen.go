// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

// Interface describing all minis
type Mini interface {
	IsMini()
}

// This is the heart of the application. Without this, nothing else matters.
type Commission struct {
	ID        string              `json:"id"`
	Artist    *User               `json:"artist"`
	Patron    *User               `json:"patron"`
	Status    Status              `json:"status"`
	Minis     []*CommissionedMini `json:"minis"`
	CreatedAt time.Time           `json:"createdAt"`
	UpdatedAt time.Time           `json:"updatedAt"`
	Total     float64             `json:"total"`
}

// Input for maintaining commissions
type CommissionInput struct {
	ID     string   `json:"id"`
	Status *Status  `json:"status"`
	Total  *float64 `json:"total"`
}

// Minis that belong to a commission. This is where the details of treatment are recorded as well as the price and quantity.
type CommissionedMini struct {
	ID        string    `json:"id"`
	Price     float64   `json:"price"`
	Quantity  int       `json:"quantity"`
	Notes     *string   `json:"notes"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Name      string    `json:"name"`
	Size      MiniSize  `json:"size"`
}

func (CommissionedMini) IsMini() {}

// Games are collections of minis
type Game struct {
	ID        string      `json:"id"`
	Name      string      `json:"name"`
	Minis     []*GameMini `json:"minis"`
	CreatedAt time.Time   `json:"createdAt"`
	UpdatedAt time.Time   `json:"updatedAt"`
}

type GameInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// Represents a miniature. This type represents all miniatures across the system.
type GameMini struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Name      string    `json:"name"`
	Size      MiniSize  `json:"size"`
}

func (GameMini) IsMini() {}

type GameMiniInput struct {
	Game string    `json:"game"`
	Name string    `json:"name"`
	Size *MiniSize `json:"size"`
}

type GenericRequestStatus struct {
	Success bool `json:"success"`
}

// Saved mini configuration. This is used to override the default pricing for a specific mini.
type MiniConfig struct {
	ID        string    `json:"id"`
	Price     float64   `json:"price"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	User      *User     `json:"user"`
	Name      string    `json:"name"`
	Size      MiniSize  `json:"size"`
	Mini      *GameMini `json:"mini"`
}

func (MiniConfig) IsMini() {}

type MiniConfigInput struct {
	Mini  string    `json:"mini"`
	Size  *MiniSize `json:"size"`
	Price *float64  `json:"price"`
}

type MiniInput struct {
	ID       string   `json:"id"`
	Quantity int      `json:"quantity"`
	Name     string   `json:"name"`
	Size     MiniSize `json:"size"`
	Notes    *string  `json:"notes"`
}

// Input for creating a new commission (automatically sets the status to ESTIMATE)
type NewCommission struct {
	Comments *string      `json:"comments"`
	Minis    []*MiniInput `json:"minis"`
	Artist   string       `json:"artist"`
}

// Default prices as configured by the user
type Prices struct {
	ID         string  `json:"id"`
	Tiny       float64 `json:"TINY"`
	Small      float64 `json:"SMALL"`
	Medium     float64 `json:"MEDIUM"`
	Large      float64 `json:"LARGE"`
	Extralarge float64 `json:"EXTRALARGE"`
	Titanic    float64 `json:"TITANIC"`
	User       *User   `json:"user"`
}

type ProfileInput struct {
	ID      string               `json:"id"`
	Name    string               `json:"name"`
	ForHire bool                 `json:"forHire"`
	Socials *ProfileInputSocials `json:"socials"`
}

type ProfileInputSocials struct {
	Facebook  *string `json:"facebook"`
	Instagram *string `json:"instagram"`
	Twitch    *string `json:"twitch"`
	Twitter   *string `json:"twitter"`
}

// Social links for a user
type Socials struct {
	Facebook  *string `json:"facebook"`
	Instagram *string `json:"instagram"`
	Twitch    *string `json:"twitch"`
	Twitter   *string `json:"twitter"`
}

// Basic user representation.
type User struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Roles     []*Role   `json:"roles"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Nickname  string    `json:"nickname"`
	Picture   string    `json:"picture"`
	ForHire   bool      `json:"forHire"`
	Socials   *Socials  `json:"socials"`
}

// Enum MiniSize
type MiniSize string

const (
	MiniSizeTiny       MiniSize = "TINY"
	MiniSizeSmall      MiniSize = "SMALL"
	MiniSizeMedium     MiniSize = "MEDIUM"
	MiniSizeLarge      MiniSize = "LARGE"
	MiniSizeExtralarge MiniSize = "EXTRALARGE"
	MiniSizeTitanic    MiniSize = "TITANIC"
)

var AllMiniSize = []MiniSize{
	MiniSizeTiny,
	MiniSizeSmall,
	MiniSizeMedium,
	MiniSizeLarge,
	MiniSizeExtralarge,
	MiniSizeTitanic,
}

func (e MiniSize) IsValid() bool {
	switch e {
	case MiniSizeTiny, MiniSizeSmall, MiniSizeMedium, MiniSizeLarge, MiniSizeExtralarge, MiniSizeTitanic:
		return true
	}
	return false
}

func (e MiniSize) String() string {
	return string(e)
}

func (e *MiniSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MiniSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MiniSize", str)
	}
	return nil
}

func (e MiniSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Enum Role
type Role string

const (
	RoleAdmin  Role = "ADMIN"
	RoleArtist Role = "ARTIST"
	RoleClient Role = "CLIENT"
)

var AllRole = []Role{
	RoleAdmin,
	RoleArtist,
	RoleClient,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleArtist, RoleClient:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Enum Status
type Status string

const (
	StatusQuote      Status = "QUOTE"
	StatusAccepted   Status = "ACCEPTED"
	StatusWaiting    Status = "WAITING"
	StatusInProgress Status = "IN_PROGRESS"
	StatusShipped    Status = "SHIPPED"
	StatusComplete   Status = "COMPLETE"
)

var AllStatus = []Status{
	StatusQuote,
	StatusAccepted,
	StatusWaiting,
	StatusInProgress,
	StatusShipped,
	StatusComplete,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusQuote, StatusAccepted, StatusWaiting, StatusInProgress, StatusShipped, StatusComplete:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
