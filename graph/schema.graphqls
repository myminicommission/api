"""
Scalar Time
"""
scalar Time

"""
Enum MiniSize
"""
enum MiniSize {
  TINY
  SMALL
  MEDIUM
  LARGE
  EXTRALARGE
  TITANIC
}

"""
Enum Status
"""
enum Status {
  QUOTE
  ACCEPTED
  WAITING
  IN_PROGRESS
  SHIPPED
  COMPLETE
}

"""
Enum Role
"""
enum Role {
  ADMIN
  ARTIST
  CLIENT
}

"""
hasRole directive
"""
directive @hasRole(role: Role!) on FIELD_DEFINITION

"""
isOwner directive
"""
directive @isOwner(isOwner: Boolean!) on FIELD_DEFINITION

"""
Interface describing all minis
"""
interface Mini {
  name: String!
  size: MiniSize!
}

"""
This is the heart of the application. Without this, nothing else matters.
"""
type Commission {
  id: ID!
  artist: User!
  patron: User!
  status: Status!
  minis: [CommissionedMini]!
  createdAt: Time!
  updatedAt: Time!
  total: Float!
}

"""
Basic user representation.
"""
type User {
  id: ID!
  name: String!
  roles: [Role]!
  createdAt: Time!
  updatedAt: Time!
  nickname: String!
}

"""
Represents a miniature. This type represents all miniatures across the system.
"""
type GameMini implements Mini {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  size: MiniSize!
}

"""
Games are collections of minis
"""
type Game {
  id: ID!
  name: String!
  minis: [GameMini]!
  createdAt: Time!
  updatedAt: Time!
}

"""
Default prices as configured by the user
"""
type Prices {
  id: ID!
  tINY: Float!
  sMALL: Float!
  mEDIUM: Float!
  lARGE: Float!
  eXTRALARGE: Float!
  tITANIC: Float!
  user: User!
}

"""
Minis that belong to a commission. This is where the details of treatment are recorded as well as the price and quantity.
"""
type CommissionedMini implements Mini {
  id: ID!
  price: Float!
  quantity: Int!
  notes: String
  createdAt: Time!
  updatedAt: Time!
  name: String!
  size: MiniSize!
}

"""
Saved mini configuration. This is used to override the default pricing for a specific mini.
"""
type MiniConfig implements Mini {
  id: ID!
  price: Float!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  name: String!
  size: MiniSize!
}

type Query {
  """
  Returns commissions where the authenticated user is either the artist or the patron.
  """
  myCommissions: [Commission]!

  """
  Retrieves a single commission based on ID. Requesting user must be authenticated and authorized.
  """
  commission(id: ID!): Commission!

  """
  Fetches a single user by their ID
  """
  user(id: ID!): User!
  MiniConfigs(user: ID!): [MiniConfig]!

  """
  Fetches list of games
  """
  games: [Game]!

  """
  Fetches a specific game
  """
  game(id: ID!): Game!

  """
  Fetches minis for a specfic game
  """
  gameMinis(game: ID!): [GameMini]!

  """
  Fetches a specific game mini
  """
  gameMini(id: ID!): GameMini!
}

"""
Input for creating a new commission (automatically sets the status to ESTIMATE)
"""
input NewCommission {
  comments: String
  minis: [MiniInput]!
  artist: ID!
}

"""
Input for maintaining commissions
"""
input CommissionInput {
  id: ID!
  status: Status
  total: Float
}

input MiniInput {
  id: ID!
  quantity: Int!
  name: String!
  size: MiniSize!
}

input MiniConfigInput {
  mini: ID!
  size: MiniSize
  price: Float
}

input GameInput {
  id: ID!
  name: String!
}

input GameMiniInput {
  game: ID!
  name: String!
  size: MiniSize!
}

"""
All the mutations.  Authentication required.
"""
type Mutation {
  """
  Creates a new commission with a status of ESTIMATE
  """
  newCommission(input: NewCommission!): Commission!

  """
  Updates a commission
  """
  updateCommission(input: CommissionInput!): Commission! @isOwner(isOwner: True)

  """
  Save a mini configuration
  """
  saveMiniConfig(input: MiniConfigInput!): MiniConfig!

  """
  Create a game
  """
  createGame(name: String!): Game!

  """
  Update a game
  """
  updateGame(input: GameInput!): Game!

  """
  Create a mini for a game
  """
  createGameMini(input: GameMiniInput): GameMini!

  """
  Update a mini for a game
  """
  updateGameMini(id: ID!, input: GameMiniInput!): GameMini!
}
